// Goal of this file is to re-create a TODO app from http://todomvc.com

import Todo from "@ext/Todo"  // Imports from external code dir (ext/).

// -- Entities
entity Task {
    isDone :: boolean,
    description :: string
}

// -- App and pages
app todoApp {
    title: "ToDo App"
}

// IDEA: `@connect Task as taskList` -> this would make it more obvious what is available, also we don't need to automatically try to guess what to import.
page Main {
    route: "/",
    style: "@ext/Main.css",
    content: {=jsx <>
        <Todo
            addTask={this.props.addTask}
            taskList={this.props.taskList}
            updateTask={this.props.updateTask}
            removeTask={this.props.removeTask}
        >
        </Todo>
        <div className="mainFooter">
            <a href="/about" className="aboutLink"> About </a>
        </div>
    </> jsx=}
}

page About {
    route: "/about",
    style: {=css
        .aboutPage {
            text-align: center;
        }
    css=},
    content: {=jsx
        <div className="aboutPage">
            <h1> About </h1>
            <p>This page was built with <a href="https://wasp-lang.dev">Wasp</a>!</p>
            <p>Check out source code <a href="https://github.com/wasp-lang/wasp/tree/master/examples/todoApp">here</a>.</p>
        </div>
    jsx=}
}

// Entity form definition.
entity-form<Task> NewTaskForm {
    fields: {
        description: {
            show: true,
            placeholder: "What needs to be done?"
        },
        isDone: {
            show: false,
            defaultValue: false  // Although not shown, this field will be set to "false".
        }
    },
    submit: {
        onEnter: true, // Parsed but not generated yet.
        button: { show: false }
    }
}

// Entity list definition.
entity-list<Task> TaskList {
    showHeader: false,
    fields: {
        description: {
            // The contract for render is: user must provide a function that:
            // - receives a task as an input
            // - returns a React Node or something that can be rendered by JSX
            // - does not depend on any outer context
            render: {=js
                (task) => {
                    if (task.isDone) return (<s>{task.description}</s>)
                    return task.description
                }
            js=}
        }
    }
}
