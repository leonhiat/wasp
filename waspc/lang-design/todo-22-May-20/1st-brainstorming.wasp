entity Task {
  done : Boolean,
  description : String
}

// TODO: Opcenito smisliti kako se mijesa javascript kod sa Wasp kodom.
// Uglavnom se svodimo na to da Wasp-u dajemo funkcije.
// Smisli kako mu ih se sve moze dati, i kako da one mogu raditi vise manje
// bilo sto, te sto je sa dependency injectionim, importovima, constraintovima
// na to sto rade ili vracaju, ... .

routes {
  route "/" -> HomePage @default
  route "/task/:taskId" -> TaskPage  // Ovo je jednostavna deklarativna verzija, parametri se sami salju u TaskPage.
  // Ovo je naprednija, ne-deklarativna verzija.
  // TODO: Kako znamo da je ova funkcija pozvala page? Ili mozda to niti ne provjeravamo.
  //  Otkud joj uopce taj goToPage? Da joj to injectamo?
  route "/task/:taskId" -> (taskId) => { goToPage("TaskPage", taskId) }
  route "/task/bytext/:query" -> ?
  route "/home" -> route "/"
  route "*" -> Page404()
}

page HomePage {
  route = /home @default
  component = Main
}

page TaskPage (taskId) {
  //route = '/task/:taskId'
  component = TaskView(taskId) // HM
}

component TaskView (taskId) {
    source: 'asdf.js'
    queries: {
      task: getTask(taskId)
    }
}

goToPage(TaskPage, taskId) -> url := /task/taskId
/task/4

@query @acl admin
getAllTasks = query ...

// Pitanja:
// 1. Moze li query imati argumente (na razini Wasp-a)?
//    Teoretski mozemo reci da query nemaju argumente.
//    Mislim da to bas i ne bi bilo prakticno ipak, iako bi moglo raditi vjerojatno.
// 2. 
@query getAllTasksForUser ~ (Task)
{=js
(Task, user, params) => {
    return Task.find({author: user.id})
}
js=}

// TODO(martin): how do we import js stuff?
// Pitanje: Koji je odnos injectanih stvari i argumenata? Ovako sad ne izgleda bas jasno sto je injectano a sto je argument.
//   Iako je i to mozda ok posto su injectane stvari i dalje argumenti, ali ipak hm.
@action ~ (Task) // -> Stuff from here gets injected. We love injecting as it enables testing.
{=js
function addNewTask (Task, newTaskData) {
    Task.insert(newTask)
}
js=}

// Do we add this to component under "actions"?
// That way it would be inject as prop (we have to do that),
// but that is cool because that makes code decoupled and all.
// Alternative is that user imports it into react component.
// But are they importing directly function then, or are they
// importing an action? If they are importing an action (what does that even mean),
// that needs to be in some special manner.
// What does it even mean that this is action, if we are not aware of any side effect,
// does it make sense to declare it as an action, should it instead just be function?
@action
{=js
function sendAnEmail (text) {
      sendgrid.sendEmail(text)  // Kako smo importali sendgrid?
}
js=}


//action addNewTask ...

component Main {
  source = "mycomp.js"
  queries = {tasks: getAllTasksForUser(f)}  // This ends up as prop.
  actions = [addNewTask]  // This ends up as prop.
}

component MainAdmin {
    source = "mycomp.js"
    queries = {allTasks: getAllTasks}
}


           
---------------------------------------
Entityi (Wasp) -> Prisma, ... .
Komponente (React)
Operacije (JS) -> query vs akcija, server vs client, custom vs built-in.
  
